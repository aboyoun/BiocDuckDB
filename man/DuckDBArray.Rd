% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DuckDBArray.R
\name{DuckDBArray}
\alias{DuckDBArray}
\alias{DuckDBArray-class}
\alias{[,DuckDBArray,ANY,ANY,ANY-method}
\alias{aperm,DuckDBArray-method}
\alias{dbconn,DuckDBArray-method}
\alias{is_nonzero,DuckDBArray-method}
\alias{is.finite,DuckDBArray-method}
\alias{is.infinite,DuckDBArray-method}
\alias{is.nan,DuckDBArray-method}
\alias{nzcount,DuckDBArray-method}
\alias{t,DuckDBArray-method}
\alias{tblconn,DuckDBArray-method}
\alias{type,DuckDBArray-method}
\alias{type<-,DuckDBArray-method}
\alias{Ops,DuckDBArray,DuckDBArray-method}
\alias{Ops,DuckDBArray,atomic-method}
\alias{Ops,atomic,DuckDBArray-method}
\alias{Math,DuckDBArray-method}
\alias{Summary,DuckDBArray-method}
\alias{mean,DuckDBArray-method}
\alias{median.DuckDBArray}
\alias{quantile.DuckDBArray}
\alias{var,DuckDBArray,ANY-method}
\alias{sd,DuckDBArray-method}
\alias{mad,DuckDBArray-method}
\alias{IQR,DuckDBArray-method}
\title{DuckDB tables as DelayedArray objects}
\usage{
DuckDBArray(conn, keycols, datacols, type = NULL)
}
\arguments{
\item{conn}{Either a character vector containing the paths to parquet, csv,
or gzipped csv data files; a string that defines a duckdb \code{read_*} data
source; a \code{DuckDBDataFrame} object; or a \code{tbl_duckdb_connection}
object.}

\item{keycols}{Either a character vector of column names from \code{conn}
that will specify the dimension names, or a named list of character vectors
where the names of the list specify the dimension names and the character
vectors set the distinct values for the dimension names.}

\item{datacols}{Either a string specifying the column from \code{conn} or a
named \code{expression} that will be evaluated in the context of \code{conn}
that defines the values in the array.}

\item{type}{String specifying the type of the data values; one of
\code{"logical"}, \code{"integer"}, \code{"integer64"}, \code{"double"}, or
\code{"character"}. If \code{NULL}, it is determined by inspecting the data.}
}
\description{
The DuckDBArray class is a \link[DelayedArray]{DelayedArray} subclass
for representing and operating on a DuckDB table.

All the operations available for \link[DelayedArray]{DelayedArray}
objects work on DuckDBArray objects.
}
\examples{
# Create a data.frame from the Titanic data
df <- do.call(expand.grid, c(dimnames(Titanic), stringsAsFactors = FALSE))
df$fate <- Titanic[as.matrix(df)]

# Write data to a parquet file
tf <- tempfile(fileext = ".parquet")
on.exit(unlink(tf))
arrow::write_parquet(df, tf)

pqarray <- DuckDBArray(tf, keycols = c("Class", "Sex", "Age", "Survived"), datacols = "fate")

}
\seealso{
\code{\link{DuckDBArraySeed}},
\code{\link[DelayedArray]{DelayedArray}}
}
\author{
Patrick Aboyoun
}
