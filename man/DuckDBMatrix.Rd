% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DuckDBMatrix.R
\name{DuckDBMatrix}
\alias{DuckDBMatrix}
\alias{DuckDBMatrix-class}
\alias{[,DuckDBMatrix,ANY,ANY,ANY-method}
\alias{matrixClass,DuckDBArray-method}
\title{DuckDB tables as DelayedMatrix objects}
\usage{
DuckDBMatrix(conn, row, col, datacols, keycols = c(row, col), type = NULL)
}
\arguments{
\item{conn}{Either a character vector containing the paths to parquet, csv,
or gzipped csv data files; a string that defines a duckdb \code{read_*} data
source; a \code{DuckDBDataFrame} object; or a \code{tbl_duckdb_connection}
object.}

\item{row}{Either a string that specifies the column in \code{conn} that
specifies the row names of the matrix, or a named list containing a single
character vector that defines the column in \code{conn} for the row names
and its values.}

\item{col}{Either a string that specifies the column in \code{conn} that
specifies the column names of the matrix, or a named list containing a single
character vector that defines the column in \code{conn} for the column names
and its values.}

\item{datacols}{Either a string specifying the column from \code{conn} or a
named \code{expression} that will be evaluated in the context of \code{conn}
that defines the values in the matrix.}

\item{keycols}{An optional character vector that define the names of the
columns in \code{conn} for the rows and columns of the matrix, or a named
list of character vectors where the names of the list define rows and columns
and the character vectors define distinct values for the rows and columns.}

\item{type}{String specifying the type of the data values; one of
\code{"logical"}, \code{"integer"}, \code{"integer64"}, \code{"double"}, or
\code{"character"}. If \code{NULL}, it is determined by inspecting the data.}
}
\description{
The DuckDBMatrix class is a \link[DelayedArray]{DelayedMatrix} subclass
for representing and operating on a DuckDB table.

All the operations available for \link[DelayedArray]{DelayedMatrix}
objects work on DuckDBMatrix objects.
}
\examples{
# Create a data.frame from a matrix
df <- data.frame(
  rowname = rep(rownames(state.x77), times = ncol(state.x77)),
  colname = rep(colnames(state.x77), each = nrow(state.x77)),
  value = as.vector(state.x77)
)

# Write data to a parquet file
tf <- tempfile(fileext = ".parquet")
on.exit(unlink(tf))
arrow::write_parquet(df, tf)

pqmat <- DuckDBMatrix(tf, row = "rowname", col = "colname", datacols = "value")

}
\author{
Patrick Aboyoun
}
