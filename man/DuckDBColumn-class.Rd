% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DuckDBColumn-class.R
\name{DuckDBColumn-class}
\alias{DuckDBColumn-class}
\alias{dbconn,DuckDBColumn-method}
\alias{tblconn,DuckDBColumn-method}
\alias{dimtbls,DuckDBColumn-method}
\alias{dimtbls<-,DuckDBColumn-method}
\alias{length,DuckDBColumn-method}
\alias{names,DuckDBColumn-method}
\alias{type,DuckDBColumn-method}
\alias{type<-,DuckDBColumn-method}
\alias{extractROWS,DuckDBColumn,ANY-method}
\alias{head,DuckDBColumn-method}
\alias{tail,DuckDBColumn-method}
\alias{as.vector,DuckDBColumn-method}
\alias{realize,DuckDBColumn-method}
\alias{show,DuckDBColumn-method}
\alias{showAsCell,DuckDBColumn-method}
\title{DuckDBColumn objects}
\description{
The DuckDBColumn class extends \linkS4class{Vector} to represent a column
extracted from a \linkS4class{DuckDBDataFrame} object.
}
\section{Accessors}{

In the code snippets below, \code{x} is a DuckDBColumn object:
\describe{
  \item{\code{length(x)}:}{
    Get the number of elements in \code{x}.
  }
  \item{\code{names(x)}:}{
    Get the names of the elements of \code{x}.
  }
  \item{\code{dimtbls(x)}, \code{dimtbls(x) <- value}:}{
    Get or set the list of dimension tables used to define partitions for
    efficient queries.
  }
  \item{\code{type(x)}, \code{type(x) <- value}:}{
    Get or set the data type of the elements; one of \code{"logical"},
    \code{"integer"}, \code{"integer64"}, \code{"double"}, or
    \code{"character"}.
  }
}
}

\section{Coercion}{

\describe{
  \item{\code{as.vector(x)}:}{
    Coerces \code{x} to a vector.
  }
  \item{\code{realize(x, BACKEND = getAutoRealizationBackend())}:}{
    Realize an object into memory or on disk using the equivalent of
    \code{realize(as.vector(x), BACKEND)}.
  }
}
}

\section{Subsetting}{

In the code snippets below, \code{x} is a DuckDBColumn object:
\describe{
  \item{\code{x[i]}:}{
    Returns a DuckDBColumn object containing the selected elements.
  }
  \item{\code{head(x, n = 6L)}:}{
    If \code{n} is non-negative, returns the first n elements of \code{x}.
    If \code{n} is negative, returns all but the last \code{abs(n)} elements
    of \code{x}.
  }
  \item{\code{tail(x, n = 6L)}:}{
    If \code{n} is non-negative, returns the last n elements of \code{x}.
    If \code{n} is negative, returns all but the first \code{abs(n)} elements
    of \code{x}.
  }
}
}

\author{
Patrick Aboyoun
}
\keyword{classes}
\keyword{methods}
