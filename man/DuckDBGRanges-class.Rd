% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DuckDBGRanges-class.R
\name{DuckDBGRanges-class}
\alias{DuckDBGRanges-class}
\alias{dbconn,DuckDBGRanges-method}
\alias{tblconn,DuckDBGRanges-method}
\alias{dimtbls,DuckDBGRanges-method}
\alias{dimtbls<-,DuckDBGRanges-method}
\alias{length,DuckDBGRanges-method}
\alias{names,DuckDBGRanges-method}
\alias{seqinfo,DuckDBGRanges-method}
\alias{seqnames,DuckDBGRanges-method}
\alias{start,DuckDBGRanges-method}
\alias{end,DuckDBGRanges-method}
\alias{width,DuckDBGRanges-method}
\alias{strand,DuckDBGRanges-method}
\alias{ranges,DuckDBGRanges-method}
\alias{elementMetadata,DuckDBGRanges-method}
\alias{elementMetadata<-,DuckDBGRanges-method}
\alias{DuckDBGRanges}
\alias{extractROWS,DuckDBGRanges,ANY-method}
\alias{[,DuckDBGRanges,ANY,ANY,ANY-method}
\alias{head,DuckDBGRanges-method}
\alias{tail,DuckDBGRanges-method}
\alias{coerce,DuckDBGRanges,DuckDBDataFrame-method}
\alias{as.data.frame,DuckDBGRanges-method}
\alias{coerce,DuckDBGRanges,GRanges-method}
\alias{realize,DuckDBGRanges-method}
\alias{show,DuckDBGRanges-method}
\title{DuckDBGRanges objects}
\description{
The DuckDBGRanges class extends the \linkS4class{GenomicRanges} virtual
class for DuckDB tables.
}
\details{
DuckDBGRanges adds \linkS4class{GenomicRanges} semantics to a DuckDB table.
This includes the ability to define the sequence names, start, end, width,
and strand columns, as well as the metadata columns. The \code{seqinfo}
slot is used to define the sequence information for the ranges.
}
\section{Constructor}{

\describe{
  \item{\code{DuckDBGRanges(conn, seqnames, start = NULL, end = NULL, width = NULL,
    strand = NULL, keycol = NULL, dimtbl = NULL, mcols = NULL, seqinfo = NULL,
    seqlengths = NULL)}:}{
    Creates a DuckDBGRanges object.
    \describe{
      \item{\code{conn}}{
        Either a character vector containing the paths to parquet, csv, or
        gzipped csv data files; a string that defines a duckdb \code{read_*}
        data source; a DuckDBDataFrame object; or a tbl_duckdb_connection
        object.
      }
      \item{\code{seqnames}}{
        Either \code{NULL} or a string specifying the column from
        \code{conn} that defines the sequence names.
      }
      \item{\code{start}}{
        Either \code{NULL} or a string specifying the column from
        \code{conn} that defines the start of the range.
      }
      \item{\code{end}}{
        Either \code{NULL} or a string specifying the column from
        \code{conn} that defines the end of the range.
      }
      \item{\code{width}}{
        Either \code{NULL} or a string specifying the column from
        \code{conn} that defines the width of the range.
      }
      \item{\code{strand}}{
        Either \code{NULL} or a string specifying the column from
        \code{conn} that defines the width of the range.
      }
      \item{\code{keycol}}{
        An optional string specifying the column name from \code{conn} that
        will define the foreign key in the underlying table, or a named list
        containing a character vector where the name of the list element
        defines the foreign key and the character vector set the distinct
        values for that key. If missing, a \code{row_number} column is
        created as an identifier.
      }
      \item{\code{dimtbl}}{
        A optional named \code{DataFrameList} that specifies the dimension
        table associated with the \code{keycol}. The name of the list
        element must match the name of the \code{keycol} list. Additionally,
        the \code{DataFrame} object must have row names that match the
        distinct values of the \code{keycol} list element and columns
        that define partitions in the data table for efficient querying.
      }
      \item{\code{mcols}}{
        Optional character vector specifying the columns that define the
        metadata columns.
      }
      \item{\code{seqinfo}}{
        Either \code{NULL}, or a \code{\link{Seqinfo}} object, or a character
        vector of unique sequence names (a.k.a. seqlevels), or a named
        numeric vector of sequence lengths.
      }
      \item{\code{seqlengths}}{
        Either \code{NULL}, or an integer vector named with
        \code{levels(seqnames)} and containing the \code{lengths}
        (or \code{NA}) for each level in \code{levels(seqnames)}.
      }
    }
  }
}
}

\section{Accessors}{

In the code snippets below, \code{x} is a DuckDBGRanges object:
\describe{
  \item{\code{length(x)}:}{
    Get the number of elements.
  }
  \item{\code{names(x)}:}{
    Get the names of the elements.
  }
  \item{\code{seqnames(x)}:}{
    Get the sequence names.
  }
  \item{\code{ranges(x)}:}{
    Get the ranges as a \linkS4class{DuckDBDataFrame}.
  }
  \item{\code{start(x)}:}{
    Get the start values as a \linkS4class{DuckDBColumn}.
  }
  \item{\code{end(x)}:}{
    Get the end values as a \linkS4class{DuckDBColumn}.
  }
  \item{\code{width(x)}:}{
    Get the width values as a \linkS4class{DuckDBColumn}.
  }
  \item{\code{strand(x)}:}{
    Get the strand values as a \linkS4class{DuckDBColumn}.
  }
  \item{\code{mcols(x)}, \code{mcols(x) <- value}:}{
    Get or set the metadata columns.
  }
  \item{\code{seqinfo(x)}:}{
    Get the information about the underlying sequences.
  }
  \item{\code{seqlevels(x)}:}{
    Get the sequence levels; equivalent to \code{seqlevels(seqinfo(x))}.
  }
  \item{\code{seqlengths(x)}:}{
    Get the sequence lengths; equivalent to \code{seqlengths(seqinfo(x))}.
  }
  \item{\code{isCircular(x)}:}{
    Get or set the circularity flags.
  }
  \item{\code{genome(x)}:}{
    Get the genome identifier or assembly name for each sequence; equivalent
    to \code{genome(seqinfo(x))}.
  }
  \item{\code{seqlevelsStyle(x)}:}{
    Get the seqname style for \code{x}.
  }
}
}

\section{Coercion}{

\describe{
  \item{\code{as(from, "DuckDBDataFrame")}:}{
    Creates a \linkS4class{DuckDBDataFrame} object.
  }
  \item{\code{as.data.frame(x)}:}{
    Coerces \code{x} to a data.frame.
  }
  \item{\code{as(from, "GRanges")}:}{
    Converts a DuckDBGRanges object to a GRanges object. This conversion
    begins by transforming the DuckDBGRanges into memory using
    \code{as.data.frame}. A GRanges object is then instantiated using the
    seqnames, start, width, and strand columns from the data.frame. Lastly,
    the seqinfo, metadata, and mcols (metadata columns) are copied over.
  }
  \item{\code{realize(x, BACKEND = getAutoRealizationBackend())}:}{
    Realize an object into memory or on disk using the equivalent of
    \code{realize(as(x, "GRanges"), BACKEND)}.
  }
}
}

\section{Subsetting}{

In the code snippets below, \code{x} is a DuckDBGRanges object:
\describe{
  \item{\code{x[i]}:}{
    Returns a DuckDBGRanges object containing the selected elements.
  }
  \item{\code{head(x, n = 6L)}:}{
    If \code{n} is non-negative, returns the first n elements of \code{x}.
    If \code{n} is negative, returns all but the last \code{abs(n)} elements
    of \code{x}.
  }
  \item{\code{tail(x, n = 6L)}:}{
    If \code{n} is non-negative, returns the last n elements of \code{x}.
    If \code{n} is negative, returns all but the first \code{abs(n)} elements
    of \code{x}.
  }
}
}

\section{Displaying}{

The \code{show()} method for DuckDBGRanges objects obeys global options
\code{showHeadLines} and \code{showTailLines} for controlling the number of
head and tail rows to display.
}

\examples{
# Create an example data set with start and width columns:
df <- data.frame(id = head(letters, 10),
                 seqnames = rep.int(c("chr2", "chr2", "chr1", "chr3"), c(1, 3, 2, 4)),
                 start = 1:10, width = 10:1,
                 strand = strand(rep.int(c("-", "+", "*", "+", "-"), c(1, 2, 2, 3, 2))),
                 score = 1:10,
                 GC = seq(1, 0, length = 10))
tf <- tempfile(fileext = ".parquet")
on.exit(unlink(tf))
arrow::write_parquet(df, tf)

# Create the DuckDBGRanges object
seqinfo <- Seqinfo(paste0("chr", 1:3), c(1000, 2000, 1500), NA, "mock1")
gr <- DuckDBGRanges(tf, seqnames = "seqnames", start = "start", width = "width",
                    strand = "strand", mcols = c("score", "GC"), seqinfo = seqinfo,
                    keycol = "id")
gr

}
\seealso{
\itemize{
  \item \code{\link{DuckDBGRangesList-class}} for the split GRanges class
  \item \code{\link[GenomicRanges]{GenomicRanges}} for the base class
}
}
\author{
Patrick Aboyoun
}
\keyword{classes}
\keyword{methods}
