% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DuckDBGRanges.R
\name{DuckDBGRanges}
\alias{DuckDBGRanges}
\alias{DuckDBGRanges-class}
\alias{dbconn,DuckDBGRanges-method}
\alias{tblconn,DuckDBGRanges-method}
\alias{length,DuckDBGRanges-method}
\alias{names,DuckDBGRanges-method}
\alias{seqinfo,DuckDBGRanges-method}
\alias{seqnames,DuckDBGRanges-method}
\alias{start,DuckDBGRanges-method}
\alias{end,DuckDBGRanges-method}
\alias{width,DuckDBGRanges-method}
\alias{strand,DuckDBGRanges-method}
\alias{ranges,DuckDBGRanges-method}
\alias{elementMetadata,DuckDBGRanges-method}
\alias{elementMetadata<-,DuckDBGRanges-method}
\alias{extractROWS,DuckDBGRanges,ANY-method}
\alias{[,DuckDBGRanges,ANY,ANY,ANY-method}
\alias{head,DuckDBGRanges-method}
\alias{tail,DuckDBGRanges-method}
\alias{coerce,DuckDBGRanges,DuckDBDataFrame-method}
\alias{as.data.frame,DuckDBGRanges-method}
\alias{show,DuckDBGRanges-method}
\title{DuckDB-backed Genomic Ranges}
\usage{
DuckDBGRanges(
  conn,
  seqnames,
  start = NULL,
  end = NULL,
  width = NULL,
  strand = NULL,
  keycols = NULL,
  mcols = NULL,
  seqinfo = NULL,
  seqlengths = NULL
)
}
\arguments{
\item{conn}{Either a character vector containing the paths to parquet, csv,
or gzipped csv data files; a string that defines a duckdb \code{read_*} data
source; a \code{DuckDBDataFrame} object; or a \code{tbl_duckdb_connection}
object.}

\item{seqnames}{Either \code{NULL} or a string specifying the column from
\code{conn} that defines the sequence names.}

\item{start}{Either \code{NULL} or a string specifying the column from
\code{conn} that defines the start of the range.}

\item{end}{Either \code{NULL} or a string specifying the column from
\code{conn} that defines the end of the range.}

\item{width}{Either \code{NULL} or a string specifying the column from
\code{conn} that defines the width of the range.}

\item{strand}{Either \code{NULL} or a string specifying the column from
\code{conn} that defines the width of the range.}

\item{keycols}{An optional character vector of column names from \code{conn}
that will define the primary key, or a named list of character vectors where
the names of the list define the key and the character vectors set the
distinct values for the key. If missing, a \code{row_number} column is
created as an identifier.}

\item{mcols}{Optional character vector specifying the columns that define
the metadata columns.}

\item{seqinfo}{Either \code{NULL}, or a \code{\link{Seqinfo}} object, or a
character vector of unique sequence names (a.k.a. seqlevels), or a named
numeric vector of sequence lengths.}

\item{seqlengths}{Either \code{NULL}, or an integer vector named with
\code{levels(seqnames)} and containing the \code{lengths} (or \code{NA}) for
each level in \code{levels(seqnames)}.}
}
\description{
Create a DuckDB-backed \linkS4class{GenomicRanges} object.
}
\examples{
# Create an example data set with start and width columns:
df <- data.frame(id = head(letters, 10),
                 seqnames = rep.int(c("chr2", "chr2", "chr1", "chr3"), c(1, 3, 2, 4)),
                 start = 1:10, width = 10:1,
                 strand = strand(rep.int(c("-", "+", "*", "+", "-"), c(1, 2, 2, 3, 2))),
                 score = 1:10,
                 GC = seq(1, 0, length = 10))
tf <- tempfile(fileext = ".parquet")
on.exit(unlink(tf))
arrow::write_parquet(df, tf)

# Create the DuckDBGRanges object
seqinfo <- GenomeInfoDb::Seqinfo(paste0("chr", 1:3), c(1000, 2000, 1500), NA, "mock1")
gr <- DuckDBGRanges(tf, seqnames = "seqnames", start = "start", width = "width",
                    strand = "strand", mcols = c("score", "GC"), seqinfo = seqinfo,
                    keycols = "id")
gr

}
\author{
Patrick Aboyoun
}
