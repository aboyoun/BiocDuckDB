% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DuckDBTable.R
\name{DuckDBTable}
\alias{DuckDBTable}
\alias{DuckDBTable-class}
\alias{show,DuckDBTable-method}
\alias{[,DuckDBTable,ANY,ANY,ANY-method}
\alias{all.equal.DuckDBTable}
\alias{as.data.frame,DuckDBTable-method}
\alias{bindCOLS,DuckDBTable-method}
\alias{colnames,DuckDBTable-method}
\alias{colnames<-,DuckDBTable-method}
\alias{coltypes}
\alias{coltypes,DuckDBTable-method}
\alias{coltypes<-}
\alias{coltypes<-,DuckDBTable-method}
\alias{dbconn,DuckDBTable-method}
\alias{is_nonzero,DuckDBTable-method}
\alias{is_sparse,DuckDBTable-method}
\alias{is.finite,DuckDBTable-method}
\alias{is.infinite,DuckDBTable-method}
\alias{is.nan,DuckDBTable-method}
\alias{ncol,DuckDBTable-method}
\alias{nrow,DuckDBTable-method}
\alias{nzcount,DuckDBTable-method}
\alias{rownames,DuckDBTable-method}
\alias{tblconn,DuckDBTable-method}
\alias{unique,DuckDBTable-method}
\alias{Ops,DuckDBTable,DuckDBTable-method}
\alias{Ops,DuckDBTable,atomic-method}
\alias{Ops,atomic,DuckDBTable-method}
\alias{Math,DuckDBTable-method}
\alias{Summary,DuckDBTable-method}
\alias{mean,DuckDBTable-method}
\alias{median.DuckDBTable}
\alias{quantile.DuckDBTable}
\alias{var,DuckDBTable,ANY-method}
\alias{sd,DuckDBTable-method}
\alias{mad,DuckDBTable-method}
\alias{IQR,DuckDBTable-method}
\title{DuckDBTable objects}
\usage{
DuckDBTable(conn, datacols = colnames(conn), keycols = NULL, type = NULL)
}
\arguments{
\item{conn}{Either a character vector containing the paths to parquet, csv,
or gzipped csv data files; a string that defines a duckdb \code{read_*} data
source; a \code{DuckDBDataFrame} object; or a \code{tbl_duckdb_connection}
object.}

\item{datacols}{Either a character vector of column names from \code{conn}
or a named \code{expression} that will be evaluated in the context of `conn`
that defines the data.}

\item{keycols}{An optional character vector of column names from \code{conn}
that will define the primary key, or a named list of character vectors where
the names of the list define the key and the character vectors set the
distinct values for the key. If missing, a \code{row_number} column is
created as an identifier.}

\item{type}{An optional named character vector where the names specify the
column names and the values specify the column type; one of
\code{"logical"}, \code{"integer"}, \code{"integer64"}, \code{"double"}, or
\code{"character"}.}
}
\description{
DuckDBTable is a low-level helper class for representing a
pointer to a \code{tbl_duckdb_connection} object.
}
\examples{
# Create a data.frame from the Titanic data
df <- do.call(expand.grid, c(dimnames(Titanic), stringsAsFactors = FALSE))
df$fate <- as.integer(Titanic[as.matrix(df)])

# Write data to a parquet file
tf <- tempfile(fileext = ".parquet")
on.exit(unlink(tf))
arrow::write_parquet(df, tf)

tbl <- DuckDBTable(tf, datacols = "fate", keycols = c("Class", "Sex", "Age", "Survived"))

}
\author{
Patrick Aboyoun
}
