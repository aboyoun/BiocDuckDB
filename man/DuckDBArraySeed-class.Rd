% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DuckDBArraySeed-class.R
\name{DuckDBArraySeed-class}
\alias{DuckDBArraySeed-class}
\alias{dbconn,DuckDBArraySeed-method}
\alias{tblconn,DuckDBArraySeed-method}
\alias{dimtbls,DuckDBArraySeed-method}
\alias{dimtbls<-,DuckDBArraySeed-method}
\alias{type,DuckDBArraySeed-method}
\alias{type<-,DuckDBArraySeed-method}
\alias{dim,DuckDBArraySeed-method}
\alias{dimnames,DuckDBArraySeed-method}
\alias{extract_array,DuckDBArraySeed-method}
\alias{extract_sparse_array,DuckDBArraySeed-method}
\alias{DelayedArray,DuckDBArraySeed-method}
\alias{DuckDBArraySeed}
\alias{[,DuckDBArraySeed,ANY,ANY,ANY-method}
\alias{aperm,DuckDBArraySeed-method}
\alias{t,DuckDBArraySeed-method}
\alias{show,DuckDBArraySeed-method}
\title{DuckDBArraySeed objects}
\description{
DuckDBArraySeed is a low-level helper class for representing a
pointer to a DuckDB table.

Note that a DuckDBArraySeed object is not intended to be used directly.
Most end users will typically create and manipulate a higher-level
\link{DuckDBArray} object instead. See \code{?\link{DuckDBArray}} for
more information.
}
\section{Constructor}{

\describe{
  \item{\code{DuckDBArraySeed(conn, datacol, keycols, dimtbls = NULL, type = NULL)}:}{
    Creates a DuckDBArraySeed object.
    \describe{
      \item{\code{conn}}{
        Either a character vector containing the paths to parquet, csv, or
        gzipped csv data files; a string that defines a duckdb \code{read_*}
        data source; a DuckDBDataFrame object; or a tbl_duckdb_connection
        object.
      }
      \item{\code{datacol}}{
        Either a string specifying the column from \code{conn} or a named
        \code{expression} that will be evaluated in the context of
        \code{conn} that defines the values in the array.
      }
      \item{\code{keycols}}{
        Either a character vector of column names from \code{conn} that will
        specify the dimension names, or a named list of character vectors
        where the names of the list specify the dimension names and the
        character vectors set the distinct values for the dimension names.
      }
      \item{\code{dimtbls}}{
        A optional named \code{DataFrameList} that specifies the dimension
        tables associated with the \code{keycols}. The name of the list
        elements match the names of the \code{keycols} list. Additionally,
        the \code{DataFrame} objects have row names that match the distinct
        values of the corresponding \code{keycols} list element and columns
        that define partitions in the data table for efficient querying.
      }
      \item{\code{type}}{
        String specifying the type of the data values; one of
        \code{"logical"}, \code{"integer"}, \code{"integer64"},
        \code{"double"}, or \code{"character"}. If \code{NULL}, it is
        determined by inspecting the data.
      }
    }
  }
}
}

\section{Accessors}{

In the code snippets below, \code{x} is a DuckDBArraySeed object:
\describe{
  \item{\code{dim(x)}:}{
    An integer vector of the array dimensions.
  }
  \item{\code{dimnames(x)}:}{
    List of array dimension names.
  }
  \item{\code{dimtbls(x)}, \code{dimtbls(x) <- value}:}{
    Get or set the list of dimension tables used to define partitions for
    efficient queries.
  }
  \item{\code{type(x)}, \code{type(x) <- value}:}{
    Get or set the data type of the array elements; one of \code{"logical"},
    \code{"integer"}, \code{"integer64"}, \code{"double"}, or
    \code{"character"}.
  }
}
}

\section{Subsetting}{

In the code snippets below, \code{x} is a DuckDBArraySeed object:
\describe{
  \item{\code{x[i, j, ..., drop = TRUE]}:}{
    Returns a new DuckDBArraySeed object. Empty dimensions are dropped if
    \code{drop = TRUE}.
  }
}
}

\section{Transposition}{

In the code snippets below, \code{x} is a DuckDBArraySeed object:
\describe{
  \item{\code{aperm(a, perm)}:}{
    Returns a new DuckDBArraySeed object with the dimensions permuted
    according to the \code{perm} vector.
  }
  \item{\code{t(x)}:}{
    For two-dimensional arrays, returns a new DuckDBArraySeed object with the
    dimensions transposed.
  }
}
}

\examples{
# Create a data.frame from the Titanic data
df <- do.call(expand.grid, c(dimnames(Titanic), stringsAsFactors = FALSE))
df$fate <- as.integer(Titanic[as.matrix(df)])

# Write data to a parquet file
tf <- tempfile(fileext = ".parquet")
on.exit(unlink(tf))
arrow::write_parquet(df, tf)

pqaseed <- DuckDBArraySeed(tf, datacol = "fate", keycols = c("Class", "Sex", "Age", "Survived"))

}
\seealso{
\itemize{
  \item \code{\link{DuckDBArraySeed-utils}} for the utilities
  \item \code{\link{DuckDBArray-class}} for the main class
  \item \code{\link{DuckDBArray-utils}} for the main class utilities
  \item \code{\link[S4Arrays]{Array}} for the base class
}
}
\author{
Patrick Aboyoun
}
\keyword{classes}
\keyword{methods}
